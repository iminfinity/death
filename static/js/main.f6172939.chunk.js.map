{"version":3,"sources":["utils/deaths.js","components/world.component.jsx","components/flash/flash.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["updateCountry","country","toLowerCase","replaceAll","deaths","a","updatedCountry","axios","get","response","data","lastItem","length","total","Cases","console","error","World","setTooltipContent","projectionConfig","rotate","scale","data-tip","zoom","center","maxZoom","geography","geographies","map","geo","onMouseEnter","NAME","properties","then","cases","onMouseLeave","stroke","style","default","fill","outline","hover","Math","floor","random","toString","pressed","rsmKey","memo","Flash","useState","display","setDisplay","className","onClick","App","content","setContent","place","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAEMA,EAAgB,SAACC,GACrB,OAAQA,GACN,IAAK,2BACH,MAAO,MACT,QACE,OAAOA,EAAQC,cAAcC,WAAW,IAAK,OAoBpCC,EAhBH,uCAAG,WAAOH,GAAP,uBAAAI,EAAA,6DAEPC,EAAiBN,EAAcC,GAFxB,kBAIYM,IAAMC,IAAN,0DAC8BF,EAD9B,mBAJZ,OAILG,EAJK,OAOLC,EAAOD,EAASC,KAChBC,EAAWD,EAAKA,EAAKE,OAAS,GACpCC,EAAQF,EAASG,MATN,kDAWXC,QAAQC,MAAR,MAXW,2CAaJH,GAbI,gEAAH,sDCFNI,EAAQ,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,kBAIZ,OACA,8BACE,cAAC,gBAAD,CACMC,iBAAkB,CAClBC,OAAQ,EAAE,GAAI,EAAG,GACjBC,MAAO,KAEPC,WAAS,GALf,SAOI,cAAC,gBAAD,CAAeC,KAAM,EAAGC,OAAQ,CAAC,GAAG,IAAKC,QAAS,IAAlD,SACF,cAAC,cAAD,CAAaC,UAlBJ,mHAkBT,SACG,qBAAGC,YACUC,KAAI,SAAAC,GAAG,OAAI,cAAC,YAAD,CAA4BH,UAAWG,EAC9DC,aAAc,WAAO,IACTC,EAASF,EAAIG,WAAbD,KACRb,EAAkB,GAAD,OAAIa,IACrB3B,EAAO2B,GAAME,MAAK,SAAAC,GACfhB,EAAkB,GAAD,OAAIa,EAAJ,cAAcG,QAIpCC,aAAc,WACZjB,EAAkB,KAEpBkB,OAAO,UACPC,MAAO,CACLC,QAAS,CACPC,KAAM,aACNC,QAAS,QAEXC,MAAO,CACLF,KAjCH,IAAMG,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IAkCjDL,QAAS,QAEXM,QAAS,CACLN,QAAS,UAvBsBX,EAAIkB,qBAqDxCC,iBAAK/B,GC7DLgC,G,MAdD,WAAQ,IAAD,EACaC,mBAAS,QADtB,mBACVC,EADU,KACDC,EADC,KAEjB,OACI,sBAAKC,UAAU,QAAShB,MAAO,CAACc,QAASA,GAAzC,UACI,yEACA,6EACA,wBAAQG,QAAS,kBAAMF,EAAW,SAAlC,qBCOGG,MAXf,WAAgB,IAAD,EACiBL,mBAAS,IAD1B,mBACNM,EADM,KACGC,EADH,KAEb,OACE,gCACE,cAAC,EAAD,CAAOvC,kBAAmBuC,IAC1B,cAAC,IAAD,CAAcC,MAAM,MAApB,SAA2BF,IAC3B,cAAC,EAAD,QCCSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f6172939.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst updateCountry = (country) => {\r\n  switch (country) {\r\n    case \"United States of America\":\r\n      return \"usa\";\r\n    default:\r\n      return country.toLowerCase().replaceAll(\" \", \"-\");\r\n  }\r\n};\r\n\r\nconst deaths = async (country) => {\r\n  let total;\r\n  const updatedCountry = updateCountry(country);\r\n  try {\r\n    const response = await axios.get(\r\n      `https://api.covid19api.com/total/dayone/country/${updatedCountry}/status/deaths`\r\n    );\r\n    const data = response.data;\r\n    const lastItem = data[data.length - 1];\r\n    total = lastItem.Cases;\r\n  } catch (error) {\r\n    console.error(error);\r\n  } finally {\r\n    return total;\r\n  }\r\n};\r\nexport default deaths;\r\n","import { ComposableMap, Geographies, Geography, ZoomableGroup, Annotation, Sphere, Graticule, Marker } from \"react-simple-maps\";\r\nimport {memo} from \"react\";\r\nimport deaths from \"../utils/deaths\";\r\nconst geoUrl =\r\n\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\nconst newWorld = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-50m-simplified.json\"\r\nconst us = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\r\nconst asia = \"https://raw.githubusercontent.com/deldersveld/topojson/master/continents/asia.json\"\r\nconst india = \"https://raw.githubusercontent.com/deldersveld/topojson/master/countries/india/india-districts.json\"\r\nconst World = ({setTooltipContent}) => {\r\n    const randomColor = () => {\r\n        return \"#\" + Math.floor(Math.random() * 16777215).toString(16)\r\n    }\r\n    return(\r\n    <div>\r\n      <ComposableMap \r\n            projectionConfig={{\r\n            rotate: [-60, 0, 0],\r\n            scale: 100\r\n            }}\r\n            data-tip=\"\"\r\n        >\r\n          <ZoomableGroup zoom={8} center={[80,20]} maxZoom={200}>\r\n        <Geographies geography={newWorld}>\r\n          {({ geographies }) =>\r\n            geographies.map(geo => <Geography key={geo.rsmKey} geography={geo}\r\n            onMouseEnter={() => {\r\n                const { NAME } = geo.properties;\r\n                setTooltipContent(`${NAME}`)\r\n                deaths(NAME).then(cases=>{\r\n                   setTooltipContent(`${NAME} - ${cases}`)\r\n                  })\r\n                ;\r\n              }}\r\n              onMouseLeave={() => {\r\n                setTooltipContent(\"\");\r\n              }}\r\n              stroke=\"#000000\"\r\n              style={{\r\n                default: {\r\n                  fill: \"whitesmoke\",\r\n                  outline: \"none\"\r\n                },\r\n                hover: {\r\n                  fill: randomColor(),\r\n                  outline: \"none\"\r\n                },\r\n                pressed: {\r\n                    outline: \"none\"\r\n                }\r\n              }}\r\n            />)\r\n          }\r\n        </Geographies>\r\n        {/* <Marker coordinates={[83.4323, 27.6866]}>\r\n        <circle r={0.8} fill=\"#7033ff\" />\r\n      </Marker>\r\n          <Annotation\r\n            subject={[83.4323,27.6866]}\r\n            dx={0}\r\n            dy={-100}\r\n            curve={-1}\r\n            connectorProps={{\r\n              stroke: \"#7033ff\",\r\n              strokeWidth: 1,\r\n              strokeLinecap: \"round\",\r\n            }}\r\n          >\r\n            <text  textAnchor=\"start\" alignmentBaseline=\"end\" fill=\"#101010\">\r\n              {\"I'm here !!!\"}\r\n            </text>\r\n          </Annotation> */}\r\n          </ZoomableGroup>\r\n      </ComposableMap>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default memo(World);","import \"./flash.styles.scss\";\r\nimport {useState} from \"react\";\r\n\r\nconst Flash = () =>  {\r\n    const [display, setDisplay] = useState(\"flex\");\r\n    return(\r\n        <div className=\"flash\"  style={{display: display}}>\r\n            <h1>Live Coronavirus Death Count By Country</h1>\r\n            <h3>Data taken from https://api.covid19api.com/</h3>\r\n            <button onClick={() => setDisplay(\"none\")}>\r\n                Ok\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Flash;","import ReactTooltip from \"react-tooltip\";\nimport \"./App.scss\";\nimport { useState } from \"react\";\nimport World from \"./components/world.component\";\nimport Flash from \"./components/flash/flash.component\";\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  return (\n    <div>\n      <World setTooltipContent={setContent} />\n      <ReactTooltip place=\"top\">{content}</ReactTooltip>\n      <Flash />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}